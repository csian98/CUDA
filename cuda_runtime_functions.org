#+TITLE: cuda_runtime_functions.org
#+AUTHOR: Jeong Hoon Choi
#+DATE: 2024.05.15

* Header File
#+begin_src C++
#include <cuda.h>
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#+end_src

* Management
#+begin_src C++
__host__ __device__ cudaError_t cudaDeviceSynchronize(void);
#+end_src

* Memory
#+begin_src c++
cudaError_t cudaMalloc(void** ptr, size_t size);
cudaError_t cudaFree(void* ptr);
cudaError_t cudaMemset(void* ptr, int value, size_t size);	// memory byte-by-byte initialization

cudaError_t cudaMemcpy(void* dst, const void* src, size_t size, enum cudaMemcpyKind kind);

cudaError_t cudaMemGetInfo(size_t* free, size_t* total);
#+end_src
** enum cudaMemcpyKind
#+begin_src C++
enum cudaMemcpyKind {
	cudaMemcpyHostToHost = 0,
	cudaMemcpyHostToDevice = 1,
	cudaMemcpyDeviceToHost = 2,
	cudaMemcpyDeviceToDevice = 3,
	cudaMemcpyDefault = 4
};
#+end_src
** multi dimension
#+begin_src C++
cudaError_t cudaMalloc2D(void* dst, size_t dpitch, const void* src, size_t spitch,
						 size_t width, size_t heihgt, cudaMemcpyKind kind);
cudaError_t cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent);

cudaError_t cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height);
cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent);

#+end_src
** Async
#+begin_src C++
__host__ __device__ cudaError_t cudaMemcpyAsync(void* dst, const void* src, size_t count,
												cudaMemcpyKind kind, cudaStream_t stream = 0);
__host__ __device__ cudaError_t cudaMemcpy2DAsync(void* dst, size_t dpitch,
												  const void* src, size_t spitch,
												  size_t width, size_t height, cudaMemcpyKind ind,
												  cudaStream_t stream = 0);
__host__ __device__ cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms* p,
												  cudaStream_t stream = 0);

cudaError_t cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height,
							  cudaStream_t stream = 0);
cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent,
							  cudaStream_t stream = 0);
#+end_src

* Error_t (cudaError_t)
#+begin_src C++
__host__ __device__ const char* cudaGetErrorName(cudaError_t error);
#+end_src
